#
# Run some Lua
#
---
gopherlua: {args: , script: result = args}
---
gopherlua: {args: , script: result = nil}
---
gopherlua: {args: [null], script: result = args}
---
gopherlua: {args: , script: "result = {1,2,3}"}
---
gopherlua: {args: {a: , b: 2, c: 3, d: null}, script: "result = args"}
---
gopherlua: {args: [null, 2, 3, null], script: "result = args"}
---
gopherlua: {args: , script: "result = math.sqrt(math.pi)"}
---
gopherlua: {args: , script: "result = string.reverse('doowgnilloc')"}
---
gopherlua: { args: we are groot, script: "result = {string.upper(args), string.len(args)}" }
---
gopherlua: {args: [X,K,A] , script: "table.sort(args); result = args"}
---
gopherlua: {args:  , script: "result = type(loadfile('init.lua'))"}
---
gopherlua:
  args: 
    a:3 : 22
    str: "a lower case string"
    arr: { x: , yy: 2 }
    list: [1,2,3]
  script: result = args
---
gopherlua:
    args: 
      a:3 : 22
      str: "a lower case string"
      arr: { x: , yy: 2 }
      list: [1,2,3]
    script: |-
      -- Uppercase all strings in a YAML tree
      function uppertree(t)
          local tt = type(t)
          if tt == "string" then
            return string.upper(t)
          elseif tt == "table" then
            local k, v = next(t, nil)
            local result = {}
            while k do
              if type(k) == "string" then
                result[string.upper(k)] = uppertree(v)
              else
                result[k] = uppertree(v)
              end
                k, v = next(t, k)
            end
            return result
          else
            return t
          end
      end

      args.date = "Fri Jun 12 16:39:31 AEST 2020"
      result = {uppertree(args), args}
---
# Load local file
gopherlua:
    args: 
      a:3 : 22
      str: "a lower case string"
      arr: { x: , yy: 2 }
      list: [1,2,3]
      float: 12.34
      empty: {define: {x: 2}}
    script: |-
      require('uppertree')
      args.date = "Fri Jun 12 16:39:31 AEST 2020"
      result = {uppertree(args)}
---
# Booleans
gopherlua:
    args: 
      a: {==: [1,2]}
      b: {==: [1,1]}
    script: result = {args.a, args.b, args.a and args.b}
---
# Builtin and macro, Unknown
---
defmacro: {name: foobar, args: x, value: x}
---
gopherlua:
    args: 
      builtin: define
      macro: foobar
      unknown: !quux
    script: result = args
---
gopherlua:
    args: nil
    script: result = {false, true}
---
==:
  - 2
  - gopherlua:
      args: nil
      script: result = 2
---
gopherlua:
  args: [[1], {"x": 3}]
  script: |
    result = {
      getmetatable(args[1]) == seqy,
      getmetatable(args[2]) == mapy
    }
---
